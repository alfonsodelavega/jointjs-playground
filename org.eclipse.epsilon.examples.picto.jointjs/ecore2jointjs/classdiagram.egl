[%

// If the root EPackage has a @constraints(file="foo.evl")
// annotation, parse the constraints into an EVL module
var module = getValidationModule();

// Compute the set of classes to be shown in this diagram
var main = getMainClass();
var classes = getVisibleClasses();%]

<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />

<title>Unified Modeling Language</title>

<link rel="stylesheet" type="text/css" href="[%=getFile("css/joint.css")%]" />
<link rel="stylesheet" type="text/css" href="[%=getFile("css/ecorecd.css")%]" />
</head>
<body>
	<div id="paper"></div>

	<script src="[%=getFile("lib/jquery.js")%]"></script>
	<script src="[%=getFile("lib/lodash.js")%]"></script>
	<script src="[%=getFile("lib/backbone.js")%]"></script>
	<script src="[%=getFile("lib/dagre.js")%]"></script>
	<script src="[%=getFile("lib/joint.js")%]"></script>

	<script src="[%=getFile("src/ecore.js")%]"></script>

	<script type="text/javascript">
		var graph = new joint.dia.Graph();

		var paper = ecore.createClassDiagram();

		var classes = {};
		var links = {};

		// for greater performance, the diagram is not updated
		//   until every element has been created and positioned
		paper.freeze();

		[** First, add all classes to the diagram **]
		[%for (c in classes) {%]
			[** Create a node for the class **]
			classes["[%=c.getNodeName()%]"] = new ecore.EClass({
				name : '[%= c.name %]',
				attributes : [[%= c.getFeatures() %]],
			});
			[%if (c == main) {%]
				classes["[%=c.getNodeName()%]"].setFillColor("#c8f0a1");
			[%}%]
		[%}%]

		Object.keys(classes).forEach(function(key) {
			graph.addCell(classes[key]);
		});

		[** Now we can add super/subtypes/etc references**]
		[%for (c in classes) {%]
			[%if ((main.isDefined() and c == main) or main.isUndefined()){%]
				[** Create nodes for all the constraints of the class*]
				[%if (isLayerActive("constraints")){%]
				index = 0;
				[%for (constraint in module.constraintContexts.select(ctx|ctx.typeName=c.name).collect(ctx|ctx.constraints).flatten()){%]
					[%if (constraint.isCritique()) {%]
						constraint = new ecore.Critique();
					[%} else {%]
						constraint = new ecore.Constraint();
					[%}%]
					constraint.setText("[%=constraint.getConstraintLabel()%]");
					constraint.addTo(graph);
					constrName = "[%=c.getNodeName() + "_c"%]" + index;
					index += 1;
					links[constrName] = constraint.createLinkFrom(classes.[%=c.getNodeName()%]);
				[%}%]
				[%}%]

				[** Create node for all the documentation annotations of the class*]
				[%if (isLayerActive("documentation")){%]
				[%var documentation = c.getAnnotationValue("http://www.eclipse.org/emf/2002/GenModel", "documentation");%]
				[%if (documentation.isDefined()){%]
					doc = new ecore.Documentation();
					doc.setText("[%=documentation%]");
					doc.addTo(graph);
					docName = "[%=c.getNodeName() + "_doc"%]";
					links[docName] = doc.createLinkFrom(classes.[%=c.getNodeName()%]);
				[%}%]
				[%}%]

				[** Create edges for the supertypes of the class **]
				[%if (isLayerActive("supertypes")){%]
				[%for (s in c.eSuperTypes.select(s|classes.includes(s))){%]
					links["[%=s.getNodeName()%]-isSuperTypeOf-[%=c.getNodeName()%]"] = new ecore.Generalization({
						source: {
							id: classes.[%=s.getNodeName()%].id
						},
						target: {
							id: classes.[%=c.getNodeName()%].id
						}
					});
				[%}%]
				[%}%]

				[** ... and for its subtypes **]
				[%if (isLayerActive("subtypes") and main.isDefined()){%]
				[%for (s in classes.select(cl|cl.eSuperTypes.includes(c))){%]
					links["[%=c.getNodeName()%]-isSuperTypeOf-[%=s.getNodeName()%]"] = new ecore.Generalization({
						source: {
							id: classes.[%=c.getNodeName()%].id
						},
						target: {
							id: classes.[%=s.getNodeName()%].id
						}
					});
				[%}%]
				[%}%]
			[%}%]
		[%}%]

		[* Finally, add the EReferences *]
		[%for (r in getUnidirectionalReferences()) {%]
			links.[%=r.getNodeName()%] = new ecore.EReference({
				source: {
					id: classes.[%=r.eContainer.getNodeName()%].id
				},
				target: {
					id: classes.[%=r.eType.getNodeName()%].id
				}
				[%if (isLayerActive("referenceLabels")){%]
				,labels: [{
					attrs: {
						text: { text: '[%=r.getReferenceLabel()%]' }
					}
					,position: {
						distance: 0.7
					}
					}]
				, labelSize: {width: ecore.util.computeTextWidth('[%=r.getReferenceLabel()%]'), height: 20}
				[%}%]
			});
			links.[%=r.getNodeName()%].attr(ecore.unidirectionalRefAttrs);
			[% if (r.containment) {%]
				// append containment attributes
				links.[%=r.getNodeName()%].attr(ecore.containmentRefAttrs);
			[%}%]
		[%}%]
		[%for (r in getBidirectionalReferences()) {%]
			links.[%=r.getNodeName()%] = new ecore.EReference({
				source: {
					id: classes.[%=r.eContainer.getNodeName()%].id
				},
				target: {
					id: classes.[%=r.eType.getNodeName()%].id
				}
				[%if (isLayerActive("referenceLabels")){%]
				,labels: [
					{
						attrs: {
							text: { text: '[%=r.getReferenceLabel()%]' }
						}
						,position: {
							distance: 0.7
						}
					},
					{
						attrs: {
							text: { text: '[%=r.eOpposite.getReferenceLabel()%]' }
						}
						,position: {
							distance: 0.3
						}
					}]
				, labelSize: {width: ecore.util.computeTextWidth('[%=r.getReferenceLabel()%]'), height: 20}
				[%}%]
			});
			[% if (r.containment) {%]
				// append containment attributes
				links.[%=r.getNodeName()%].attr(ecore.containmentRefAttrs);
			[%}%]
		[%}%]

		Object.keys(links).forEach(function(key) {
			graph.addCell(links[key]);
		});

		// automatic layout of the diagram
		// https://resources.jointjs.com/docs/jointjs/v3.1/joint.html#layout.DirectedGraph
		joint.layout.DirectedGraph.layout(graph, {
			// necessary variables for the autolayout
			dagre: dagre,
			graphlib: dagre.graphlib,
			// any additional options would go here (very good options to parametrize in egx)
			//rankSep: 60, // sep between the ranks (each level of top-bottom, left-right, etc.)
			//nodeSep: 60, // sep between nodes in a rank
			//edgeSep: 40,
			marginX: 5,  // margin with the window borders
			marginY: 5,  // margin with the window borders
			setVertices: true, // fix vertices position in nodes
			setLabels: false, // fix labels position (bad idea with bidirectional references)
			rankDir: "TB", // "TB" / "BT" / "LR" / "RL"
			ranker: 'network-simplex' // how to assign ranks to nodes. Others: 'tight-tree' or 'longest-path'
		});
		paper.unfreeze();
		paper.fitToContent();

		// link tools setup
		Object.keys(links).forEach(function(key) {
			links[key].initTools(paper);
		});

		paper.on('link:mouseenter', function (linkView) {
			linkView.showTools();
		});

		// sneaky mouse listener, allows moving link anchors in elements
		paper.on('blank:mouseover', function(linkView) {
			paper.hideTools();
		});

	</script>
</body>
</html>



[%

operation EReference getReferenceLabel() {
	var label = self.name;
	if (self.isDerived()) label = "/" + label;
	// if (self.eType.isDefined()) label += " : " + self.eType.name;
	if (self.isMany()) {
		label += " [";
		if (self.isRequired()) {
			label += "1..";
		}
		else {
			label += "0..";
		}
		label += "*" + "]";
	}
	return label;
}

operation EClass getFeatures() {
	var features = self.eAllStructuralFeatures;

	if (not isLayerActive("inherited")) features = self.eStructuralFeatures;
	if (not isLayerActive("derived")) features = features.reject(f|f.isDerived);

	if (self.eSuperTypes.includes(main)) features = features.excludingAll(main.eAllStructuralFeatures);

	return features.collect(f | f.getFormattedFeature()).concat(", ");
}

operation EStructuralFeature getFormattedFeature() {
	var label = self.name;
	if (self.isDerived()) label = "/" + label;
	if (self.eType.isDefined()) label += " : " + self.eType.name;
	if (self.isMany) label += "["+"*"+"]";
	return "'" + label + "'";
}

operation EOperation getLabel() {
	var label = self.name + "(" + self.eParameters.collect(p|p.getLabel()).concat(", ") + ")";
	if (self.eType.isDefined()) {
		label += " : " + self.eType.name;
		if (self.isMany) {
			label += "["+"*"+"]";
		}
	}
	return label;
}

operation Any getConstraintLabel() {
	var label = self.name;
	if (self.comments.notEmpty()) label = label + ": " + self.comments.first();
	return label;
}

operation getVisibleClasses() {
	var main = getMainClass();
	if (main.isDefined()) {
		var classes : OrderedSet;
		classes.add(main);
		if (isLayerActive("supertypes")) classes.addAll(main.eSuperTypes); // All its supertypes
		if (isLayerActive("subtypes")) classes.addAll(EClass.all.select(o|o.eSuperTypes.includes(main))); // All its subtypes
		classes.addAll(getVisibleReferences().eType);
		return classes;
	}
	else {
		return EClass.all.select(c|classNames.includes(c.name));
	}
}

operation getMainClass() {
	if (mainClassName.isDefined()) {
		return EClass.all.selectOne(c|c.name = mainClassName);
	}
}

operation getUnidirectionalReferences() {
	var bidirectionalReferences = getBidirectionalReferences();
	return getVisibleReferences().excludingAll(bidirectionalReferences).
		excludingAll(bidirectionalReferences.eOpposite);
}

operation getBidirectionalReferences() {
	var references = getVisibleReferences();
	return references.select(r|r.eOpposite.isDefined() and references.indexOf(r) < references.indexOf(r.eOpposite));
}

operation getVisibleReferences() {
	var visibleReferences : OrderedSet;
	var main = getMainClass();
	if (main.isDefined()){
		visibleReferences.addAll(main.eReferences);
		visibleReferences.addAll(main.eReferences.eOpposite);
		visibleReferences.remove(null);
	}
	else {
		visibleReferences.addAll(classes.eReferences.flatten().select(r|classes.includes(r.eType)));
	}
	visibleReferences = visibleReferences.reject(r|r.eType = r.eContainer);
	if (not isLayerActive("derived")) visibleReferences = visibleReferences.reject(r|r.isDerived);
	return visibleReferences;
}

operation getValidationModule() {
	var module = new Native("org.eclipse.epsilon.evl.EvlModule");
	var constraints = EPackage.all.first().getAnnotationValue("constraints", "file");
	if (not constraints.isDefined()) return module;

	var constraintsUrl = new Native("java.net.URL")(new Native("java.net.URL")(M.resource.uri.toString()), constraints);
	module.parse(constraintsUrl.toURI());
	return module;
}

operation EModelElement getAnnotationValue(name : String, detail : String) : Any {
	var ann = self.eAnnotations.selectOne(a|a.source = name);
	var det;

	if (ann.isDefined()) {
		det = ann.details.selectOne(d|d.key = detail);
	}

	if (det.isDefined()) {
		return det.value;
	}

	return det;
}

operation EClass getNodeName() {
	return "_" + self.name;
}

operation EReference getNodeName() {
	return "_" + self.eContainer.name + "_" + self.name;
}

operation isLayerActive(id : String) {
	var layer = layers.selectOne(l|l.id = id);
	if (layer.isDefined()) {
		return layer.active;
	}
	else {
		return true;
	}
}

operation Any getIcon() {
	return getImage("icons/" + self.eClass.name + ".gif");
}

operation getFile(file : String) {
	return getImage(file);
}

%]
