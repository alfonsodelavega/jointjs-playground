[%

// If the root EPackage has a @constraints(file="foo.evl")
// annotation, parse the constraints into an EVL module
//var module = getValidationModule();

// Compute the set of classes to be shown in this diagram
var main = getMainClass();
var classes = getVisibleClasses();%]

<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />

<title>Unified Modeling Language</title>

<link rel="stylesheet" type="text/css" href="[%=getFile("css/joint.css")%]" />
<link rel="stylesheet" type="text/css" href="[%=getFile("css/ecorecd.css")%]" />
</head>
<body>
	<div id="paper"></div>

	<script src="[%=getFile("lib/jquery.js")%]"></script>
	<script src="[%=getFile("lib/lodash.js")%]"></script>
	<script src="[%=getFile("lib/backbone.js")%]"></script>
	<script src="[%=getFile("lib/dagre.js")%]"></script>
	<script src="[%=getFile("lib/joint.js")%]"></script>

	<script src="[%=getFile("src/ecore.js")%]"></script>

	<script type="text/javascript">
		var graph = new joint.dia.Graph();

		var paper = ecore.createClassDiagram();

		var classes = {};
		var relations = {};

		[** First, add all classes to the diagram **]
		[%for (c in classes) {%]
			[** Create a node for the class **]
			classes["[%=c.getNodeName()%]"] = new ecore.EClass({
				name : '[%= c.name %]',
				attributes : ["[%= c.getAttributes() %]"],
			});
		[%}%]

		Object.keys(classes).forEach(function(key) {
			graph.addCell(classes[key]);
		});

		[** Now we can add super/subtypes/etc references**]
		[%for (c in classes) {%]
			[%if ((main.isDefined() and c == main) or main.isUndefined()){%]
				[** Create edges for the supertypes of the class **]
				[%if (isLayerActive("supertypes")){%]
				[%for (s in c.eSuperTypes.select(s|classes.includes(s))){%]
					relations["[%=s.getNodeName()%]-isSuperTypeOf-[%=c.getNodeName()%]"] = new ecore.Generalization({
						source: {
							id: classes.[%=s.getNodeName()%].id
						},
						target: {
							id: classes.[%=c.getNodeName()%].id
						}
					});
				[%}%]
				[%}%]
	
				[** ... and for its subtypes **]
				[%if (isLayerActive("subtypes") and main.isDefined()){%]
				[%for (s in classes.select(cl|cl.eSuperTypes.includes(c))){%]
					relations["[%=c.getNodeName()%]-isSuperTypeOf-[%=s.getNodeName()%]"] = new ecore.Generalization({
						source: {
							id: classes.[%=c.getNodeName()%].id
						},
						target: {
							id: classes.[%=s.getNodeName()%].id
						}
					});
				[%}%]
				[%}%]
			[%}%]
		[%}%]

		[* Finally, add the EReferences *]
		[%for (r in getUnidirectionalReferences()) {%]
			relations.[%=r.getNodeName()%] = new ecore.EReference({
				source: {
					id: classes.[%=r.eContainer.getNodeName()%].id
				},
				target: {
					id: classes.[%=r.eType.getNodeName()%].id
				},
				attrs: ecore.unidirectionalRefAttrs
			});
			[% if (r.containment) {%]
				// append containment attributes
				Object.assign(relations.[%=r.getNodeName()%].get("attrs"), ecore.containmentRefAttrs)
			[%}%]
		[%}%]
		[%for (r in getBidirectionalReferences()) {%]
			relations.[%=r.getNodeName()%] = new ecore.EReference({
				source: {
					id: classes.[%=r.eContainer.getNodeName()%].id
				},
				target: {
					id: classes.[%=r.eType.getNodeName()%].id
				}
			});
			[% if (r.containment) {%]
				// append containment attributes
				Object.assign(relations.[%=r.getNodeName()%].get("attrs"), ecore.containmentRefAttrs)
			[%}%]
		[%}%]

		Object.keys(relations).forEach(function(key) {
			graph.addCell(relations[key]);
		});

		// avoid links accross classes on movement
		//   this might penalize performance if there are many links
		graph.on('change:position', function(cell) {
			Object.keys(relations).forEach(function (key) {
				paper.findViewByModel(relations[key]).update();
			});
		});

		// automatic layout of the diagram
		joint.layout.DirectedGraph.layout(graph, {
			// necessary variables for the autolayout
			dagre: dagre,
			graphlib: dagre.graphlib,
			// any additional options would go here
			nodeSep: 50,
			edgeSep: 80,
			rankDir: "LR" // "TB" / "BT" / "LR" / "RL"
		});

	</script>
</body>
</html>



[%

operation EClass getAttributes() {
	return self.eAttributes.collect(attr | attr.name + " : " + attr.eType.name).concat(", ");
}


operation EClass getLabel() {
	var fillcolor = "fffcdc"; if (self==main) fillcolor="c8f0a1";
	var label = "<table cellspacing='0' cellborder='0' cellpadding='1' bgcolor='#" + fillcolor + "'>";
	var features = self.eAllStructuralFeatures;

	if (not isLayerActive("inherited")) features = self.eStructuralFeatures;
	if (not isLayerActive("derived")) features = features.reject(f|f.isDerived);

	if (self.eSuperTypes.includes(main)) features = features.excludingAll(main.eAllStructuralFeatures);

	var javascript = "javascript:top.showView('/Model/Classes/" + self.name + "')";
	var tooltip = "Show class diagram for " + self.name;
	if (self==main) {
		javascript = "javascript:top.showElement('" + self.id + "','" + self.eResource.uri + "')";
		tooltip = "Go to " + self.name + " in the Ecore editor";
	}

	label += "<tr><td sides='B' colspan='2' border='1'>" +
		"<table border='0' cellspacing='0' cellborder='0' cellpading='0'>" +
		"<tr><td align='right' valign='middle'><img src='" + self.getIcon()+ "'></img></td>" +
		"<td align='left' valign='middle' href=\""+javascript+"\" tooltip='" + tooltip + "'>" + self.name + "</td></tr></table></td></tr>";

	label += "<tr><td></td><td></td></tr>";

	for (f in features.sortBy(f|f.name.toLowerCase())) {
		label += "<tr>";
		label += "<td><img src='" + f.getIcon() + "'></img></td><td align='left'>" + f.getLabel(self) + "</td>";
		label += "</tr>";
	}

	if (features.isEmpty()){
		label += "<tr>";
		label += "<td> </td><td> </td>";
		label += "</tr>";
	}

	label += "</table>";
	return label;
}

operation EStructuralFeature getLabel(eClass : EClass) {
	var label = self.name;
	if (self.isDerived()) label = "/" + label;
	if (self.eType.isDefined()) label += " : " + self.eType.name;
	if (self.isMany) label += "["+"*"+"]";
	label += "  ";
	if (eClass == main and self.eContainer() == eClass) label = "<font color='blue'>" + label + "</font>";
	if (self.isTypeOf(EReference)) {
		// add href here
	}
	return label;
}

operation EOperation getLabel() {
	var label = self.name + "(" + self.eParameters.collect(p|p.getLabel()).concat(", ") + ")";
	if (self.eType.isDefined()) {
		label += " : " + self.eType.name;
		if (self.isMany) {
			label += "["+"*"+"]";
		}
	}
	return label;
}

operation EReference getArrowHead() {
	if (self.eOpposite.isDefined() and self.eOpposite.containment) {
		return "diamond";
	}
	return "open";
}

operation EReference getArrowTail() {
	if (self.containment) {
		return "diamond";
	}
	else {
		if (self.eOpposite.isDefined()) {
			return "open";
		}
		else {
			return "none";
		}
	}

}

operation EReference getIdentifier() {
	return self.eContainingClass.name + "_" + self.name;
}

operation Any getConstraintLabel() {
	var label = self.name;
	if (self.comments.notEmpty()) label = label + ": " + self.comments.first();
	return label.toMultiline();
}

operation Any getConstraintColour() {
	if (self.isCritique()) return "khaki1";
	else return "mistyrose";
}

operation getVisibleClasses() {
	var main = getMainClass();
	if (main.isDefined()) {
		var classes : OrderedSet;
		classes.add(main);
		if (isLayerActive("supertypes")) classes.addAll(main.eSuperTypes); // All its supertypes
		if (isLayerActive("subtypes")) classes.addAll(EClass.all.select(o|o.eSuperTypes.includes(main))); // All its subtypes
		classes.addAll(getVisibleReferences().eType);
		return classes;
	}
	else {
		return EClass.all.select(c|classNames.includes(c.name));
	}
}

operation getMainClass() {
	if (mainClassName.isDefined()) {
		return EClass.all.selectOne(c|c.name = mainClassName);
	}
}

operation getUnidirectionalReferences() {
	var bidirectionalReferences = getBidirectionalReferences();
	return getVisibleReferences().excludingAll(bidirectionalReferences).
		excludingAll(bidirectionalReferences.eOpposite);
}

operation getBidirectionalReferences() {
	var references = getVisibleReferences();
	return references.select(r|r.eOpposite.isDefined() and references.indexOf(r) < references.indexOf(r.eOpposite));
}

operation getVisibleReferences() {
	var visibleReferences : OrderedSet;
	var main = getMainClass();
	if (main.isDefined()){
		visibleReferences.addAll(main.eReferences);
		visibleReferences.addAll(main.eReferences.eOpposite);
		visibleReferences.remove(null);
	}
	else {
		visibleReferences.addAll(classes.eReferences.flatten().select(r|classes.includes(r.eType)));
	}
	visibleReferences = visibleReferences.reject(r|r.eType = r.eContainer);
	if (not isLayerActive("derived")) visibleReferences = visibleReferences.reject(r|r.isDerived);
	return visibleReferences;
}

operation getValidationModule() {
	var module = new Native("org.eclipse.epsilon.evl.EvlModule");
	var constraints = EPackage.all.first().getAnnotationValue("constraints", "file");
	if (not constraints.isDefined()) return module;

	var constraintsUrl = new Native("java.net.URL")(new Native("java.net.URL")(M.resource.uri.toString()), constraints);
	module.parse(constraintsUrl.toURI());
	return module;
}

operation EModelElement getAnnotationValue(name : String, detail : String) : Any {
	var ann = self.eAnnotations.selectOne(a|a.source = name);
	var det;

	if (ann.isDefined()) {
		det = ann.details.selectOne(d|d.key = detail);
	}

	if (det.isDefined()) {
		return det.value;
	}

	return det;
}

operation String toMultiline() : String {
	var multiline = "";

	for (line in self.split("\\n")) {
		var length = 0;
		for (part in line.split(" ")) {
			multiline += part + " ";
			if (length > 30) {
				multiline += "\\l";
				length = 0;
			}
			else {
				length += part.length();
			}
		}
		if (not multiline.endsWith("\\l")) multiline += "\\l";
		if (hasMore) multiline += "\\n";
	}
	if (not multiline.endsWith("\\l")) multiline += "\\l";

	multiline = multiline.replaceAll('"', '\\\\"');

	return multiline;
}

operation EClass getNodeName() {
	return "_" + self.name;
}

operation EReference getNodeName() {
	return "_" + self.eContainer.name + "_" + self.name;
}

operation isLayerActive(id : String) {
	var layer = layers.selectOne(l|l.id = id);
	if (layer.isDefined()) {
		return layer.active;
	}
	else {
		return true;
	}
}

operation Any getIcon() {
	return getImage("icons/" + self.eClass.name + ".gif");
}

operation getFile(file : String) {
	return getImage(file);
}

%]
